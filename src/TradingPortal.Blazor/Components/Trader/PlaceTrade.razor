@page "/trader/place-trade"
@using Business.Domain
@using Business.Experts.Trader.FindTrades
@using Business.Experts.Trader.PlaceTrade
@using System.ComponentModel.DataAnnotations
@inject Business.Experts.Trader.Trader trader
@inject Business.Experts.IdentityManager.IdentityManager identityManager
@inject ILogger<PlaceTrade> Logger

<PageTitle>New Trade</PageTitle>

<div class="card shadow-sm p-4 mt-3">
    <h2 class="text-primary">📈 Place a New Trade</h2>

    <EditForm Model="placeTradeInputModel" OnValidSubmit="SubmitTrade">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Instrument</label>
                <InputText @bind-Value="placeTradeInputModel.Instrument" class="form-control" />
                <ValidationMessage For="@(() => placeTradeInputModel.Instrument)" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Side</label>
                <InputSelect @bind-Value="placeTradeInputModel.Side" class="form-select">
                    <option value="Buy">Buy</option>
                    <option value="Sell">Sell</option>
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label">Quantity</label>
                <InputNumber @bind-Value="placeTradeInputModel.Quantity" class="form-control" />
                <ValidationMessage For="@(() => placeTradeInputModel.Quantity)" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Order Type</label>
                <InputSelect @bind-Value="placeTradeInputModel.OrderType" class="form-select">
                    <option value="Market">Market</option>
                    <option value="Limit">Limit</option>
                    <option value="Stop">Stop</option>
                    <option value="StopLimit">Stop-Limit</option>
                </InputSelect>
            </div>

            @if (placeTradeInputModel.OrderType != OrderType.Market) {
                <div class="col-md-4">
                    <label class="form-label">Price</label>
                    <InputNumber @bind-Value="placeTradeInputModel.Price" class="form-control" />
                    <ValidationMessage For="@(() => placeTradeInputModel.Price)" />
                </div>
            }

            <div class="col-md-4">
                <label class="form-label">Time In Force</label>
                <InputSelect @bind-Value="placeTradeInputModel.TimeInForce" class="form-select">
                    <option value="Day">Day</option>
                    <option value="GTC">GTC</option>
                    <option value="IOC">IOC</option>
                </InputSelect>
            </div>

            <div class="col-md-6">
                <label class="form-label">Strategy Tag</label>
                <InputText @bind-Value="placeTradeInputModel.StrategyCode" class="form-control" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Portfolio ID</label>
                <InputText @bind-Value="placeTradeInputModel.PortfolioCode" class="form-control" />
            </div>

            <div class="col-md-12">
                <label class="form-label">User Notes</label>
                <InputTextArea @bind-Value="placeTradeInputModel.UserComment" class="form-control" rows="2" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Requested Execution Time (UTC)</label>
                <InputDate @bind-Value="placeTradeInputModel.ExecutionRequestedFor" class="form-control" />
            </div>
        </div>

        <div class="mt-4 text-end">
            <button class="btn btn-success px-4" type="submit">💼 Submit Trade</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(placeTradeViewModel.Result)) {
        <div class="alert @placeTradeViewModel.AlertCssClass mt-4">@placeTradeViewModel.Result</div>
    }
</div>

<div class="d-flex justify-content-between align-items-center mt-5 mb-2">
    <h5 class="text-secondary">📋 Recently Submitted Trades</h5>
    <div class="d-flex gap-2">
        <InputDate @bind-Value="findTradesInputModel.FromDate" class="form-control form-control-sm" style="width: 160px" />
        <InputDate @bind-Value="findTradesInputModel.ToDate" class="form-control form-control-sm" style="width: 160px" />
        <InputText @bind-Value="findTradesInputModel.Instrument" class="form-control form-control-sm" style="width: 150px" placeholder="Instrument" />
        <InputSelect @bind-Value="findTradesInputModel.Side" class="form-select form-select-sm" style="width: 120px">
            <option value="">All</option>
            <option value="Buy">Buy</option>
            <option value="Sell">Sell</option>
        </InputSelect>
        <button class="btn btn-sm btn-outline-secondary" @onclick="Reload">Apply</button>
    </div>
</div>

@if (findTradesViewModel.Trades.Rows.Any()) {
    <div class="card shadow-sm p-4 mt-3">
        <table class="table table-sm table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Instrument</th>
                    <th>Side</th>
                    <th>Qty</th>
                    <th>Type</th>
                    <th>Price</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trade in findTradesViewModel.Trades.Rows) {
                    <tr>
                        <td>@trade.Id</td>
                        <td>@trade.Instrument</td>
                        <td>@trade.Side</td>
                        <td>@trade.Quantity</td>
                        <td>@trade.OrderType</td>
                        <td>@(trade.Price?.ToString("F2") ?? "-")</td>
                        <td>@trade.SubmittedAt.ToString("u")</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="mt-2 text-muted small">
            <strong>Total:</strong> @findTradesViewModel.Trades.Rows.Count |
            <strong>Buy:</strong> @findTradesViewModel.BuyCount |
            <strong>Sell:</strong> @findTradesViewModel.SellCount
        </div>
    </div>
}


@code {

    private FindTradesInputModel findTradesInputModel = new();
    private FindTradesViewModel findTradesViewModel = new();
        
    private PlaceTradeInputModel placeTradeInputModel = new();
    private PlaceTradeViewModel placeTradeViewModel = new();
        
    private string userName = string.Empty;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    private CancellationTokenSource tcs = new();
    private CancellationToken Token => tcs.Token;
    
    protected override async Task OnInitializedAsync() {
        userName = identityManager.GetUserName(HttpContext);
        await Reload();
    }

    private async Task SubmitTrade() {
        placeTradeViewModel = await trader.PlaceTrade(placeTradeInputModel, Token);
        await Reload();
    }

    private async Task Reload() {
        placeTradeInputModel = new();
        placeTradeInputModel.TraderId = userName;
        findTradesInputModel = new();
        findTradesInputModel.TraderId = userName;
        findTradesViewModel = await trader.GetRecentTrades(findTradesInputModel, Token);
    }
}
