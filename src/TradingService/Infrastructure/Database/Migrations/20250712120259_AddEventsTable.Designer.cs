// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingService.Infrastructure.Database;

#nullable disable

namespace TradingService.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    [Migration("20250712120259_AddEventsTable")]
    partial class AddEventsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TradingService.Infrastructure.Database.Models.EventModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RaisedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TradingService.Infrastructure.Database.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExecutionRequestedForUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instrument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StrategyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeInForce")
                        .HasColumnType("int");

                    b.Property<string>("TraderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e170ba5f-98d8-4893-8333-e21c5c79dc01"),
                            Instrument = "USD",
                            OrderType = 0,
                            PortfolioCode = "P1",
                            Price = 100m,
                            Quantity = 1m,
                            Side = 0,
                            Status = 0,
                            StrategyCode = "S1",
                            SubmittedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeInForce = 0,
                            TraderId = "me",
                            UserComment = ""
                        },
                        new
                        {
                            Id = new Guid("e170ba5f-98d8-4893-8333-e21c5c79dc02"),
                            Instrument = "EUR",
                            OrderType = 0,
                            PortfolioCode = "P1",
                            Price = 100m,
                            Quantity = 1m,
                            Side = 0,
                            Status = 0,
                            StrategyCode = "S1",
                            SubmittedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeInForce = 0,
                            TraderId = "me",
                            UserComment = ""
                        },
                        new
                        {
                            Id = new Guid("e170ba5f-98d8-4893-8333-e21c5c79dc03"),
                            Instrument = "GBD",
                            OrderType = 0,
                            PortfolioCode = "P1",
                            Price = 100m,
                            Quantity = 1m,
                            Side = 0,
                            Status = 0,
                            StrategyCode = "S1",
                            SubmittedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeInForce = 0,
                            TraderId = "me",
                            UserComment = ""
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
